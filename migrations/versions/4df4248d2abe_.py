"""empty message

Revision ID: 4df4248d2abe
Revises: 38395b979b79
Create Date: 2021-07-11 20:10:55.356770

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import JSONB, ARRAY, TIMESTAMP
from sqlalchemy.ext.mutable import MutableDict, MutableList
from sqlalchemy.orm.session import Session
from sqlalchemy.orm import declarative_base

# revision identifiers, used by Alembic.
revision = '4df4248d2abe'
down_revision = '38395b979b79'
branch_labels = None
depends_on = None

from bs4 import BeautifulSoup

def extract_text(html):
    soup = BeautifulSoup(html, features="lxml")
    return soup.get_text()

def truncate_text(text, truncate_at=155):
    text = text.replace('\n', ' ').strip(' ').replace('  ', ' ')
    if len(text) > truncate_at:
        text = f"{text[0:truncate_at-3]}..."
    return text

Base = declarative_base()

class User(Base):
    __tablename__ = "users"
    id = sa.Column(sa.Integer, primary_key=True, index=True)
    created = sa.Column(TIMESTAMP, nullable=False)
    username = sa.Column(sa.String, unique=True, nullable=False)
    email = sa.Column(sa.String, unique=True, nullable=False)
    password_hash = sa.Column(sa.String, nullable=False)
    preferences = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    blocked = sa.Column(sa.Boolean, default=False)
    admin = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    validatedEmail = sa.Column(sa.Boolean, default=False)
    uploads_enabled = sa.Column(sa.Boolean, default=False, nullable=False)
    token = sa.Column(JSONB, nullable=True)
    consentTexts = sa.Column(ARRAY(JSONB), nullable=True)
    #authored_forms = sa.relationship("Form", cascade = "all, delete, delete-orphan")
    timezone = sa.Column(sa.String, nullable=True)
    fedi_auth = sa.Column(MutableDict.as_mutable(JSONB), nullable=True)

class Form(Base):
    __tablename__ = "forms"
    _site=None
    id = sa.Column(sa.Integer, primary_key=True, index=True)
    created = sa.Column(TIMESTAMP, nullable=False)
    slug = sa.Column(sa.String, unique=True, nullable=False)
    author_id = sa.Column(sa.Integer, sa.ForeignKey('users.id'), nullable=False)
    structure = sa.Column(MutableList.as_mutable(ARRAY(JSONB)), nullable=False)
    fieldIndex = sa.Column(MutableList.as_mutable(ARRAY(JSONB)), nullable=False)
    editors = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    enabled = sa.Column(sa.Boolean, default=False)
    expired = sa.Column(sa.Boolean, default=False)
    sendConfirmation = sa.Column(sa.Boolean, default=False)
    expiryConditions = sa.Column(JSONB, nullable=False)
    sharedAnswers = sa.Column(MutableDict.as_mutable(JSONB), nullable=True)
    shared_notifications = sa.Column(MutableList.as_mutable(ARRAY(sa.String)), nullable=False)
    restrictedAccess = sa.Column(sa.Boolean, default=False)
    adminPreferences = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    introductionText = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    afterSubmitText = sa.Column(JSONB, nullable=False)
    expiredText = sa.Column(JSONB, nullable=False)
    thumbnail = sa.Column(sa.String, nullable=True)
    published_cnt = sa.Column(sa.Integer, default=0, nullable=False)
    consentTexts = sa.Column(ARRAY(JSONB), nullable=True)

class Site(Base):
    __tablename__ = "site"
    id = sa.Column(sa.Integer, primary_key=True, index=True)
    created = sa.Column(TIMESTAMP, nullable=False)
    hostname = sa.Column(sa.String, nullable=False)
    port = sa.Column(sa.Integer, nullable=True)
    scheme = sa.Column(sa.String, nullable=False, default="http")
    siteName = sa.Column(sa.String, nullable=False)
    defaultLanguage = sa.Column(sa.String, nullable=False)
    primary_color = sa.Column(sa.String, nullable=False)
    invitationOnly = sa.Column(sa.Boolean, default=True)
    consentTexts = sa.Column(ARRAY(JSONB), nullable=False)
    newUserConsentment = sa.Column(JSONB, nullable=True)
    smtpConfig = sa.Column(JSONB, nullable=False)
    newuser_enableuploads = sa.Column(sa.Boolean, nullable=False, default=False)
    mimetypes = sa.Column(JSONB, nullable=False)
    email_footer = sa.Column(sa.String, nullable=True)
    blurb = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('fedi_auth', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('forms', sa.Column('thumbnail', sa.String(), nullable=True))
    op.add_column('forms', sa.Column('published_cnt', sa.Integer(), nullable=True))
    # ### end Alembic commands ###
    op.execute("UPDATE forms SET published_cnt = 0")
    op.alter_column('forms', 'published_cnt', nullable=False)
    # update site.blurb with new 'short_text' key
    session = Session(bind=op.get_bind())
    do_commit = False
    site = session.query(Site).first()
    if site:
        do_commit = True
        text = extract_text(site.blurb['html']).strip('\n')
        text = truncate_text(text, truncate_at=155)
        new_blurb = {'html': site.blurb['html'],
                     'markdown': site.blurb['markdown'],
                     'short_text': text}
        site.blurb = new_blurb
    forms = session.query(Form).all()
    for form in forms:
        do_commit = True
        short_text = extract_text(form.introductionText['html'])
        short_text = truncate_text(short_text)
        new_intro = {'html': form.introductionText['html'],
                     'markdown': form.introductionText['markdown'],
                     'short_text': short_text}
        form.introductionText = new_intro
    if do_commit:
        session.commit()
    session.close()

def downgrade():
    session = Session(bind=op.get_bind())
    do_commit = False
    site = session.query(Site).first()
    if site:
        do_commit = True
        new_blurb = {'html': site.blurb['html'],
                     'markdown': site.blurb['markdown']}
        site.blurb = new_blurb
    forms = session.query(Form).all()
    for form in forms:
        do_commit = True
        new_intro = {'html': form.introductionText['html'],
                     'markdown': form.introductionText['markdown']}
        form.introductionText = new_intro
    if do_commit:
        session.commit()
    session.close()
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('users', 'fedi_auth')
    op.drop_column('forms', 'published_cnt')
    op.drop_column('forms', 'thumbnail')
    # ### end Alembic commands ###
