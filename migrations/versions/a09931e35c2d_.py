"""empty message

Revision ID: a09931e35c2d
Revises: 4df4248d2abe
Create Date: 2021-08-26 14:46:43.805645

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.dialects.postgresql import JSONB, ARRAY, TIMESTAMP
from sqlalchemy.ext.mutable import MutableDict, MutableList
from sqlalchemy.orm.session import Session
from sqlalchemy.orm import declarative_base
from datetime import datetime, timezone

# revision identifiers, used by Alembic.
revision = 'a09931e35c2d'
down_revision = '4df4248d2abe'
branch_labels = None
depends_on = None

Base = declarative_base()

class Form(Base):
    __tablename__ = "forms"
    _site=None
    id = sa.Column(sa.Integer, primary_key=True, index=True)
    created = sa.Column(TIMESTAMP, nullable=False)
    slug = sa.Column(sa.String, unique=True, nullable=False)
    author_id = sa.Column(sa.Integer, sa.ForeignKey('users.id'), nullable=False)
    structure = sa.Column(MutableList.as_mutable(ARRAY(JSONB)), nullable=False)
    fieldIndex = sa.Column(MutableList.as_mutable(ARRAY(JSONB)), nullable=False)
    editors = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    enabled = sa.Column(sa.Boolean, default=False)
    expired = sa.Column(sa.Boolean, default=False)
    sendConfirmation = sa.Column(sa.Boolean, default=False)
    expiryConditions = sa.Column(JSONB, nullable=False)
    sharedAnswers = sa.Column(MutableDict.as_mutable(JSONB), nullable=True)
    shared_notifications = sa.Column(MutableList.as_mutable(ARRAY(sa.String)), nullable=False)
    restrictedAccess = sa.Column(sa.Boolean, default=False)
    adminPreferences = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    introductionText = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    afterSubmitText = sa.Column(JSONB, nullable=False)
    expiredText = sa.Column(JSONB, nullable=False)
    thumbnail = sa.Column(sa.String, nullable=True)
    published_cnt = sa.Column(sa.Integer, default=0, nullable=False)
    consentTexts = sa.Column(ARRAY(JSONB), nullable=True)

class User(Base):
    __tablename__ = "users"
    id = sa.Column(sa.Integer, primary_key=True, index=True)
    created = sa.Column(TIMESTAMP, nullable=False)
    username = sa.Column(sa.String, unique=True, nullable=False)
    email = sa.Column(sa.String, unique=True, nullable=False)
    password_hash = sa.Column(sa.String, nullable=False)
    preferences = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    blocked = sa.Column(sa.Boolean, default=False)
    admin = sa.Column(MutableDict.as_mutable(JSONB), nullable=False)
    validatedEmail = sa.Column(sa.Boolean, default=False)
    uploads_enabled = sa.Column(sa.Boolean, default=False, nullable=False)
    token = sa.Column(JSONB, nullable=True)
    consentTexts = sa.Column(ARRAY(JSONB), nullable=True)
    timezone = sa.Column(sa.String, nullable=True)
    fedi_auth = sa.Column(MutableDict.as_mutable(JSONB), nullable=True)

class FormUser(Base):
    __tablename__ = "form_users"
    id = sa.Column(sa.Integer, primary_key=True, index=True, unique=True)
    created = sa.Column(TIMESTAMP, nullable=False)
    form_id = sa.Column(sa.Integer, sa.ForeignKey('forms.id',
                                                ondelete="CASCADE"),
                                                nullable=False)
    user_id = sa.Column(sa.Integer, sa.ForeignKey('users.id',
                                                ondelete="CASCADE"),
                                                nullable=False)
    can_edit = sa.Column(sa.Boolean, default=False)
    notifications = sa.Column(JSONB, nullable=False)
    field_index = sa.Column(JSONB, nullable=True)
    order_by = sa.Column(sa.String, nullable=True)

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('form_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('form_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('can_edit', sa.Boolean(), nullable=True),
    sa.Column('notifications', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('field_index', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('order_by', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['form_id'], ['forms.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_form_users_id'), 'form_users', ['id'], unique=True)

    session = Session(bind=op.get_bind())
    forms = session.query(Form).all()
    for form in forms:
        for editor_id in form.editors.keys():
            new_user_data = {
                'user_id': editor_id,
                'form_id': form.id,
                'can_edit': True,
                'notifications': form.editors[editor_id]['notification'],
            }
        form_user = FormUser(**new_user_data)
        form_user.created = datetime.now(timezone.utc)
        session.add(form_user)
    session.commit()
    session.close()

    op.drop_column('forms', 'sharedAnswers')
    op.drop_column('forms', 'editors')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('forms', sa.Column('editors', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False))
    op.add_column('forms', sa.Column('sharedAnswers', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_form_users_id'), table_name='form_users')
    op.drop_table('form_users')
    # ### end Alembic commands ###
